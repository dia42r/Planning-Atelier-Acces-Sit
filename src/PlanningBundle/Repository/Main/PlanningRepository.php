<?php

namespace PlanningBundle\Repository\Main;

use Doctrine\ORM\EntityRepository;

/**
 * PlanningRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlanningRepository extends EntityRepository
{
    
    
    public function findAll() 
    {
        return $this->findBy([], ['startDate' => 'ASC']);
        
    }
    
    public function getByActor($actor_id) 
    {    
        $q = $this->createQueryBuilder("p")
            ->where('p.actor = :actor_id')
            ->setParameter(':actor_id', $actor_id)
            ->getQuery();
        
    return $q->getResult();
    }
    
    
    /**
     * 
     * @param type $date
     * @return type
     */
    public function findByLastTaskEndDate($date, $actor) 
    {
        $q = $this->createQueryBuilder('p')
                ->where('p.endDate LIKE :date')
                ->andWhere('p.actor = :actor ')
                ->orderBy('p.endDate','DESC')
                ->setParameter(':date',  $date .'%')
                ->setParameter(':actor', $actor)
                ->select('p.endDate as endDate')
                ->setMaxResults(1)
                ->getQuery(); 
        try {
            return $q->getSingleScalarResult();
        } catch (\Doctrine\ORM\NoResultException $ex) {
            return null;
        }       
    }

    /**
     * 
     * @param type $actor_id
     * @param type $date
     * @return type
     */
    public function findActorOccupedRangeDate($actor, $date) 
    {
        $q = $this->createQueryBuilder('p')
                ->where('p.startDate LIKE :date')
                ->andWhere('p.endDate LIKE :date')
                ->andWhere('p.actor = :actor')
                
                ->setParameter(':date', $date. '%')
                ->setParameter(':actor', $actor)
                ->orderBy('p.startDate', 'ASC')
                ->select(' p.startDate as startDate, p.endDate as endDate, p.duration as duration ')
                ->getQuery();
        return $q->getResult(); 
    }
    
    /**
     * Retourne la somme des heures d'un acteur sur une journee 
     * @param type $actor_id
     * @param type $date
     * @return type
     */
    public function findSumTaskByActor($actor_id, $date) 
    {
        $q = $this->createQueryBuilder("p")
                ->where('p.startDate LIKE :date')
                ->andWhere('p.actor = :actor_id')
                ->setParameter(':date', $date. '%')
                ->setParameter(':actor_id', $actor_id)
                ->select(' sum(p.duration) as sumTask ')
                ->getQuery();
        
        try {
            return $q->getSingleScalarResult();
        } catch (\Doctrine\ORM\NoResultException $ex) {
            return 0;
        } 
    }
   
    
    /**
     * Retourne la date de fin de fabrication estimÃ© d'une ligne de commande
     * @param type $id
     */
    public function findSaleDocumentLineEndDate($id) 
    {
        $q = $this->createQueryBuilder("p")
                ->select(' max(p.endDate) as endDateEstimated ')
                ->where('p.saleDocumentLine = :id')
                ->setParameter(':id', $id)
                ->getQuery();
        
        try {
            return $q->getSingleScalarResult();
        } catch (\Doctrine\ORM\NoResultException $ex) {
            return null;
        }
    }
    
    
    public function findSaleDocumentLineCumulDuration($id)
    {
        $q = $this->createQueryBuilder("p")
                ->where('p.saleDocumentLine =  :id')
                ->setParameter(':id', $id)
                ->select(' sum(p.duration) as sumTask ')
                ->getQuery();
        
        try {
            return $q->getSingleScalarResult();
        } catch (\Doctrine\ORM\NoResultException $ex) {
            return null;
        } 
    }
    
    
    /**
     * 
     * @param type $sale_document_id
     * @return type
     */
    public function findSchedulingBySaleDocumentLine($sale_document_id)
    {
        $q = $this->createQueryBuilder("p")
                ->where('p.saleDocumentLine =  :id')
                ->setParameter(':id', $sale_document_id)
                ->orderBy('p.startDate', 'ASC')
                ->getQuery();
            return $q->getResult();
    }
    
    
    public function findStartDateById($id) 
    {    
        $q = $this->createQueryBuilder("p")
                ->where("p.id = :id")
                ->select("p.startDate")
                ->setParameter(":id", $id)
                ->getQuery();
        
        try {
            return $q->getSingleScalarResult();
        } catch (\Doctrine\ORM\NoResultException $ex) {
            return null;
        }                 
    }
    


    public function findActorAvaibiliteForAnHour($actor_id, $date) 
    {
        $q = $this->createQueryBuilder("p")
                ->where('p.actor =  :actor')
                ->andWhere(' :date BETWEEN p.startDate AND p.endDate ')
                ->setParameter(':actor', $actor_id)
                ->setParameter(':date', $date)
                ->orderBy('p.startDate', 'ASC')
                ->getQuery();
        dump($q);
        return $q->getResult();
    }
}
