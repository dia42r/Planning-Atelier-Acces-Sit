<?php

namespace PlanningBundle\Repository;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\NoResultException;

/**
 * SaleDocumentLineRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SaleDocumentLineRepository extends \Doctrine\ORM\EntityRepository
{

    public function findBySaleDocumentId($id)
    {
        $q = $this->createQueryBuilder('s')
            ->select('s')
            ->where('s.saleDocument = :id')
            ->setParameter('id', $id)
            ->getQuery();

        return $q->getResult();
    }
    public function findDoc($id)
    {
        // Création d'une requete personnalisé Query Builder
        $q = $this->createQueryBuilder("s") // Création d'un alias
        ->select('s') // Selection des alias dont on a besoin
        ->join("s.item","i") // Jointure avec la table Item pour pouvoir utilisé les données
        ->join("s.saledocument","b")
            ->where("b.id = :docid") // En pointant vers la bonne donnée
            ->setParameter('docid',$id)
            ->getQuery();

        return $q->getResult();
    }

    public function findDocStatusValid($id)
    {
        // Création d'une requete personnalisé Query Builder
        $q = $this->createQueryBuilder("s") // Création d'un alias
        ->select('s') // Selection des alias dont on a besoin
        ->join("s.item","i") // Jointure avec la table Item pour pouvoir utilisé les données
        ->join("s.saledocument","b")
            ->where("b.id = :docid") // En pointant vers la bonne donnée
            ->andWhere("s.statusBis is NULL ")
            ->setParameter('docid',$id)
            ->getQuery();

        return $q->getResult();
    }

    public function findItem($id)
    {
        // Création d'une requete personnalisé Query Builder
        $q = $this->createQueryBuilder("s") // Création d'un alias
        ->select('s') // Selection des alias dont on a besoin
        ->join("s.item","i") // Jointure avec la table Item pour pouvoir utilisé les données
        ->join("s.saledocument","b")
            ->where("s.id = :doclineid") // En pointant vers la bonne donnée
//            ->andWhere("i.id = :itemid")
            ->setParameter('doclineid',$id)
//            ->setParameter('itemid',$item)
//            ->setParameter('docnum', $documentnumber)
            ->getQuery();

        try {
            return $q->getSingleResult();
        } catch (NoResultException $e) {
        } catch (NonUniqueResultException $e) {
        }
    }
    public function findlastid()
    {
        $d = $this->createQueryBuilder('s')
            ->select('s.id')
            ->orderBy('s.id', 'DESC')
            ->setFirstResult(1)
            ->setMaxResults(1)
            ->getQuery();
        return $d->getSingleResult();
    }
    public function findWait()
    {
        $d = $this->createQueryBuilder('s')
            ->select('s.id')
            ->where("s.statusBis = 'En attente'")
            ->setFirstResult(1)
            ->setMaxResults(1)
            ->getQuery();
        return $d->getSingleResult();
    }
}
